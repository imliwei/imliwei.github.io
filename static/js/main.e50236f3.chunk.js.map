{"version":3,"sources":["components/SearchHeader.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchHeader","useState","inputValue","setInputValue","className","action","type","value","onChange","e","target","placeholder","Footer","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAsBeA,MAnBf,WAAyB,IAAD,EACgBC,mBAAS,IADzB,mBACbC,EADa,KACDC,EADC,KAEpB,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,QAAf,aACA,yBAAKA,UAAU,YACX,0BAAMC,OAAO,KACT,2BACIC,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAcM,EAAEC,OAAOH,QACxCI,YAAY,2DAChB,2BAAOL,KAAK,SAASC,MAAM,qB,MCDhCK,MAVf,WACI,OACI,yBAAKR,UAAU,UACX,gQACA,0PACA,iG,MC2CGS,MA7Cf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACb,uBAAGU,KAAK,kBAAkBJ,OAAO,SAASK,IAAI,sBAAsBX,UAAU,YAA9E,kCADF,iFAGA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cAAf,kCAGA,yBAAKA,UAAU,aACb,yGACA,yGACA,sFACA,kEAAuB,uBAAGU,KAAK,kBAAkBJ,OAAO,SAASK,IAAI,sBAAsBX,UAAU,YAA9E,+CAEzB,yBAAKA,UAAU,aAAf,wkBAOJ,yBAAKA,UAAU,YACb,yBAAKA,UAAU,aAAf,0DAGA,wBAAIA,UAAU,aACZ,8DAGA,+DACA,+DACA,+DACA,+DACA,iEAGJ,kBAAC,EAAD,QCnCcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e50236f3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './SearchHeader.css'\n\nfunction SearchHeader() {\n    const [inputValue, setInputValue] = useState(\"\")\n    return (\n        <div className=\"SearchHeader\">\n            <div className=\"logo\">Cai菜</div>\n            <div className=\"search-v\">\n                <form action=\"#\">\n                    <input\n                        type=\"text\"\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                        placeholder=\"请输入你要看的文章\" />\n                    <input type=\"submit\" value=\"搜索\"/>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchHeader","import React from 'react';\n\nimport './Footer.css'\n\nfunction Footer() {\n    return (\n        <div className=\"Footer\">\n            <span>《前端修仙传》情节跌宕起伏、扣人心弦，是一本情节与文笔俱佳的职场菜鸟心得。</span>\n            <span>本站所有内容均为原创内容，所有章节均由作者自己上传，只为让更多读者欣赏。</span>\n            <span>Copyright 前端修仙传 All Rights Reserved.</span>\n        </div>\n    )\n}\n\nexport default Footer","import React from 'react';\n\nimport SearchHeader from './components/SearchHeader'\nimport Footer from './components/Footer'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchHeader></SearchHeader>\n      <div className=\"App-head\">\n        <div className=\"head-box-a\">\n          <a href=\"www.imliwei.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"App-link\">真正的主页</a>&nbsp;&gt;&nbsp;前端修仙传--最新章节列表\n        </div>\n        <div className=\"head-box-b\">\n          <div className=\"head-title\">\n            前端修仙传\n          </div>\n          <div className=\"head-affx\">\n            <span>作&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;者:&nbsp;&nbsp;儿儿菜</span>\n            <span>状&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;态:&nbsp;&nbsp;连载中</span>\n            <span>最后更新:&nbsp;&nbsp;2020-02-23 02:58:17</span>\n            <span>最新章节:&nbsp;&nbsp;<a href=\"www.imliwei.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"App-link\">第9833章 诸神之力</a></span>\n          </div>\n          <div className=\"head-desc\">\n            菜鸟是一个网络用语，一指新手，二指在某方面应用水平较低者。某个人刚刚加入某个团队，\n            或某个组织刚刚进入某个行业，适应环境，接受新的事物，\n            都是需要一个过程的，处在这个过程阶段的人或组织，就叫菜鸟。\n          </div>\n        </div>\n      </div>\n      <div className=\"App-list\">\n        <div className=\"list-head\">\n          《前端修仙传》正文\n        </div>\n        <ul className=\"list-main\">\n          <li>\n          新书感言。\n          </li>\n          <li>第1章 哈喽Kitty</li>\n          <li>第1章 哈喽Kitty</li>\n          <li>第1章 哈喽Kitty</li>\n          <li>第1章 哈喽Kitty</li>\n          <li>第1章 哈喽Kitty</li>\n        </ul>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}